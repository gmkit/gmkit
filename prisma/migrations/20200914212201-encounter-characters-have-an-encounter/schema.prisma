generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  campaigns UserInCampaign[]
  @@map(name: "users")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Campaign {
  id        Int      @default(autoincrement()) @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  users      UserInCampaign[]
  encounters Encounter[]
  @@map(name: "campaigns")
}

enum CampaignRole {
  GM
  PLAYER
}

model UserInCampaign {
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  campaign   Campaign     @relation(fields: [campaignId], references: [id])
  campaignId Int
  createdAt  DateTime     @default(now())
  role       CampaignRole

  @@id([userId, campaignId])
  @@map(name: "users_in_campaign")
}

model Encounter {
  id         Int      @default(autoincrement()) @id
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int

  characters EncounterCharacter[]

  @@map(name: "encounters")
}

model EncounterCharacter {
  id        Int      @default(autoincrement()) @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  encounter   Encounter @relation(fields: [encounterId], references: [id])
  encounterId Int

  initiative   Int
  referenceUrl String?
}
